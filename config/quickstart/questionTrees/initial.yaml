parameters:
  app.tree.initial:
    welcome:
      type: banner
      description: |-
        Please configure the base details of your project (type, software stack).
        Except the type, everything can be changed later on.

    project.name:
      type: string
      description: 'the name of the project'
      defaultDescription: 'name of current directory'
      mandatory: true
      default: 'basename(getcwd())'
      defaultEval: true

    project.type:
      type: select_single
      description: 'the project type'
      options:
        symfony: 'Symfony web/console app'
        drupal: 'Drupal site'
        wordpress: 'Wordpress site'
        reactjs: 'ReactJS app'
        gatsby: 'Gatsby app'
        generic_nodejs_web: 'Other NodeJS static-compiled web app (nuxt, jekyll, ...)'
        generic_nodejs_server: 'NodeJS server app or web app with dynamic NodeJS backend (react dom-server, ...)'
        generic_static_web: 'Generic static Web content'
        generic_php_web: 'Generic PHP Web content'
        generic_php_cli: 'Generic PHP CLI application'
      optionsConfiguration:
        symfony:
          set:
            php.enabled: true
            externalServices.enabled: true
            os.workDirectory: '/var/www'
            os.documentRoot: '/var/www/public'
            'os.cliTools.tooling.[]':
              - unzip #composer
              - git #composer
        drupal:
          set:
            php.enabled: true
            webserver.enabled: true
            externalServices.enabled: true
            os.workDirectory: '/var/www'
            os.documentRoot: '/var/www/web'
            'os.cliTools.tooling.[]':
              - unzip
              - git
            'os.cliTools.base.[]':
              - cron #drush cron
              - logrotate
        wordpress:
          set:
            php.enabled: true
            webserver.enabled: true
            externalServices.enabled: true
            os.workDirectory: '/var/www'
            'os.cliTools.tooling.[]':
              - unzip
              - git
            'os.cliTools.base.[]':
              - cron #wp cron
              - logrotate
        generic_php_web:
          set:
            php.enabled: true
            webserver.enabled: true
            externalServices.enabled: true
            os.workDirectory: '/var/www'
            'os.cliTools.tooling.[]':
              - unzip
              - git
            'os.cliTools.base.[]':
              - cron
              - logrotate
        generic_php_cli:
          set:
            php.enabled: true
            externalServices.enabled: true
            os.workDirectory: '/opt/app'
            'os.cliTools.tooling.[]':
              - unzip
              - git
        reactjs:
          set:
            nodejs.enabled: true
            webserver.enabled: true
            nodejs.target: tooling
            os.workDirectory: '/opt/app'
            os.documentRoot: '/opt/app/public'
        gatsby:
          set:
            nodejs.enabled: true
            webserver.enabled: true
            nodejs.target: tooling
            os.workDirectory: '/opt/app'
            os.documentRoot: '/opt/app/public'
        generic_nodejs_web:
          set:
            nodejs.enabled: true
            webserver.enabled: true
            nodejs.target: tooling
            os.workDirectory: '/opt/app'
            os.documentRoot: '/opt/app/public'
        generic_nodejs_server:
          set:
            nodejs.enabled: true
            externalServices.enabled: true
            nodejs.target: base
            os.workDirectory: '/opt/app'
        generic_static_web:
          set:
            webserver.enabled: true
            os.workDirectory: '/var/www'
            os.documentRoot: '/var/www'
            'os.cliTools.base.[]':
              - cron
              - logrotate
      final: true
      mandatory: true

    os.name:
      type: select_single
      description: 'the base OS for the Docker images'
      options:
        ubuntu: Ubuntu
        debian: Debian
        alpine: Alpine
      default: ubuntu
      mandatory: true

    os.ubuntu_version:
      type: select_single
      if: '#os.name# === ''ubuntu'''
      pathOverride: 'os.version'
      description: 'the Ubuntu version for the Docker images'
      options:
        '18.04': '18.04 LTS'
        '20.04': '20.04 LTS'
      default: '20.04'
      mandatory: true

    os.debian_version:
      type: select_single
      if: '#os.name# === ''debian'''
      pathOverride: 'os.version'
      description: 'the Debian version for the Docker images'
      options:
        buster: 'buster / stable'
        bullseye: 'bullseye / testing'
      default: buster
      mandatory: true

    os.alpine_version:
      type: select_single
      if: '#os.name# === ''alpine'''
      pathOverride: 'os.version'
      description: 'the Alpine version for the Docker images'
      options:
        '3.12': '3.12 (2020-05)'
        '3.13': '3.13 (2021-01)'
      default: '3.13'
      mandatory: true

    os.locale:
      type: select_single
      description: 'the default locale for the Docker images'
      default: 'C.UTF-8'
      mandatory: true
      options:
        #TODO need a way to avoid typing down 364 locale definitions from /usr/share/i18n/locales
        #keep those I need (C, en-US, de-DE) and do this later
        'C': 'C (ANSI, English)'
        'C.UTF-8': 'C (UTF-8, English)'
        'en_US.UTF-8': 'en_US (UTF-8)'
        'de_DE.UTF-8': 'de_DE (UTF-8)'

    os.timezone:
      type: select_single
      description: 'the default timezone for the Docker images'
      default: 'Etc/UTC'
      mandatory: true
      options:
        #TODO need a way to avoid typing down 629 TZ definitions from /usr/share/zoneinfo/posix/
        'Etc/UTC': 'UTC'
        'Europe/Berlin': 'Europe/Berlin'

    symfony.type:
      type: select_single
      description: 'Symfony project type'
      if: '#project.type# == ''symfony'''
      mandatory: true
      options:
        web: 'Web (enables web server)'
        cli: 'CLI/other (no web server)'
      optionsConfiguration:
        web:
          set:
            webserver.enabled: true
            'os.cliTools.base.[]':
              - cron #php sessions
              - logrotate #logs
            'php.extensions.base.[]':
              - xml #dependency of symfony/framework-bundle
        cli:
          set:
            webserver.enabled: null

    webserver.software:
      type: select_single
      description: 'the web server'
      if: '#webserver.enabled# === true'
      mandatory: true
      options:
        apache: Apache
        nginx: Nginx
        lighttpd: lighttpd
      default: apache

    php.webserverIntegrationType:
      type: select_single
      description: 'the PHP integration'
      if: '#webserver.enabled# === true && #php.enabled# === true'
      options:
        mod_php: mod_php
        php_fpm: PHP-FPM
      mandatory: true
      optionsConfiguration:
        mod_php:
          if: '#webserver.software# === ''apache'''
          default_if: '#webserver.software# === ''apache'''
        php_fpm:
          default_if: '#webserver.software# !== ''apache'''

    externalServices.types:
      type: select_multi
      description: 'additional services'
      if: '#externalServices.enabled# === true'
      options:
        mariadb: MariaDB
        mysql: MySQL
        postgres: PostgreSQL
        mongodb: MongoDB
        sqlite: SQLite
        mail: 'Mailcatcher (dummy SMTP server)'
        redis: 'Redis Cache'
        elasticsearch: ElasticSearch
        memcached: Memcached
        ldap: 'OpenLDAP + phpldapadmin'
        solr: Solr
      optionsConfiguration:
        mariadb:
          set:
            'php.extensions.tooling.[]': mysql
        mysql:
          set:
            'php.extensions.tooling.[]': mysql
        postgres:
          set:
            'php.extensions.tooling.[]': pgsql
        mongodb:
          set:
            'php.extensions.tooling.[]': mongodb
        sqlite:
          set:
            'php.extensions.tooling.[]': sqlite3
        redis:
          set:
            'php.extensions.tooling.[]': redis
        memcached:
          set:
            'php.extensions.tooling.[]': memcache
        ldap:
          set:
            'php.extensions.tooling.[]': ldap
        solr:
          set:
            'php.extensions.tooling.[]': solr

    php.version:
      type: select_single
      description: 'the PHP version'
      if: '#php.enabled# === true && in_array(#os.name#,[''ubuntu''])'
      options:
        '7.3': 'PHP 7.3'
        '7.4': 'PHP 7.4'
        '8.0': 'PHP 8.0'
      default: '7.4'
      mandatory: true

    symfony.modules:
      type: select_multi
      description: 'Symfony bundles and packs'
      if: '#project.type# == ''symfony'''
      options:
        symfony/console: Console
        symfony/ldap: LDAP
        symfony/form: Forms
        symfony/twig-pack: Twig
        symfony/maker-bundle: 'Maker bundle'
        doctrine/doctrine-bundle: 'Doctrine Base'
        orm-fixtures: 'Doctrine Fixtures'
        doctrine/doctrine-migrations-bundle: 'Doctrine Migrations'
        symfony/monolog-bundle: 'Monolog Logger'
        symfony/apache-pack: 'Apache integration'
        symfony/cache: Cache
        symfony/profiler-pack: 'Profiler pack'
        symfony/mailer: Mailer
        symfony/phpunit-bridge: 'PHPUnit bridge'
        symfony/security-bundle: Security
        symfony/serializer: Serializer
        symfony/translation: Translation
        symfony/webpack-encore-bundle: 'Webpack / Encore bundle'
      optionsConfiguration:
        symfony/apache-pack:
          if: '#webserver.software# === ''apache'''
          default_if: '#webserver.software# === ''apache'''

    php.extensions.base:
      type: select_multi
      description: 'the PHP extensions to install in the base image'
      if: '#php.enabled# === true'
      options: 'app.phpExtensions'
      default:
        - curl

    php.extensions.tooling:
      type: select_multi
      description: 'additional PHP extensions to install in the tooling image'
      if: '#php.enabled# === true'
      options: 'app.phpExtensions'
      default:
        - xdebug

    nodejs.version:
      type: select_single
      description: 'the NodeJS version'
      if: '#nodejs.enabled# === true'
      options:
        'lts/dubnium': 'v10 LTS (dubnium)'
        'lts/erbium': 'v12 LTS (erbium)'
        'lts/fermium': 'v14 LTS (fermium)'
      default: 'lts/fermium'
      mandatory: true

    nodejs.packageManager:
      type: select_single
      description: 'the NodeJS package manager'
      if: '#nodejs.enabled# === true'
      options:
        npm: 'npm'
        yarn: 'yarn'
      default: yarn
      mandatory: true

    os.workDirectory:
      type: string
      mandatory: true
      description: 'the Docker image''s working directory (WORKDIR directive)'
      if: '#os.workDirectory# === null'
    os.documentRoot:
      type: string
      mandatory: true
      description: 'the Docker image''s web server document root'
      if: '#os.documentRoot# === null && #webserver.enabled# === true'

    os.cliTools.base:
      type: select_multi
      description: 'additional CLI tools in base image'
      options: 'app.cli_tools'
    os.cliTools.tooling:
      type: select_multi
      description: 'additional CLI tools in tooling image'
      options: 'app.cli_tools'
